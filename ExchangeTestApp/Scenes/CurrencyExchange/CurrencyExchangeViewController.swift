//
//  CurrencyExchangeViewController.swift
//  ExchangeTestApp
//
//  Created by Vladimir on 27.01.2021.
//  Copyright (c) 2021 ___ORGANIZATIONNAME___. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

protocol CurrencyExchangeDisplayLogic: class
{
    func setNavigationTitle(viewModel: CurrencyExchange.SetNavigationTitle.ViewModel)
    func displayFetchedCurrencies(viewModel: CurrencyExchange.FetchCurrencies.ViewModel)
    func displayCurrentCurrencyExchange(viewModel: CurrencyExchange.FetchCurrentCurrencyExchange.ViewModel)
    func displayCountExchange(viewModel: CurrencyExchange.CountExchange.ViewModel)
}

class CurrencyExchangeViewController: UIViewController
{
    var contentView = CurrencyExchangeView()
    var interactor: CurrencyExchangeBusinessLogic?
    var router: (NSObjectProtocol & CurrencyExchangeRoutingLogic & CurrencyExchangeDataPassing)?
    
    // MARK: Object lifecycle
    
    override init(nibName nibNameOrNil: String?, bundle nibBundleOrNil: Bundle?)
    {
        super.init(nibName: nibNameOrNil, bundle: nibBundleOrNil)
        setup()
    }
    
    required init?(coder aDecoder: NSCoder)
    {
        super.init(coder: aDecoder)
        setup()
    }
    
    override func loadView()
    {
        view = contentView
    }
    
    private func setup()
    {
        let viewController = self
        let interactor = CurrencyExchangeInteractor()
        let presenter = CurrencyExchangePresenter()
        let router = CurrencyExchangeRouter()
        viewController.interactor = interactor
        viewController.router = router
        interactor.presenter = presenter
        presenter.viewController = viewController
        router.viewController = viewController
        router.dataStore = interactor
        setupView()
        setupTarget()
    }
    
    override func viewDidLoad()
    {
        super.viewDidLoad()
        interactor?.fetchCurrencies(request: CurrencyExchange.FetchCurrencies.Request())
    }
    
    private func setupView()
    {
        navigationItem.rightBarButtonItem = UIBarButtonItem(title: "Exchange", style: .plain, target: self, action: #selector(handleExchangeTaped))
    }
    
    private func setupTarget()
    {
        contentView.exchangeFromCollectionView.completionHandlerSelectCurrency = handleExchangeFrom
        contentView.exchangeToCollectionView.completionHandlerSelectCurrency = handleExchangeTo
        
        contentView.exchangeFromCollectionView.completionHandlerChangeValueInputCurrency = handelChangeValueInputFrom
        contentView.exchangeToCollectionView.completionHandlerChangeValueInputCurrency = handelChangeValueInputTo
    }
    
    @objc private func handleExchangeFrom(index: Int) {
        interactor?.changeExchange(request: CurrencyExchange.ChangeExchange.Request(context: .From, index: index))
    }
    
    @objc private func handleExchangeTo(index: Int) {
        interactor?.changeExchange(request: CurrencyExchange.ChangeExchange.Request(context: .To, index: index))
    }
    
    @objc private func handelChangeValueInputFrom(text: String?) {
        interactor?.countExchange(request: CurrencyExchange.CountExchange.Request(context: .From, text: text))
    }
    
    @objc private func handelChangeValueInputTo(text: String?) {
        interactor?.countExchange(request: CurrencyExchange.CountExchange.Request(context: .To, text: text))
    }
    
    @objc private func handleExchangeTaped() {
        print(1)
    }
    
    private func getActiveCells(from: Int, to: Int) -> (CurrencyExchangeCell, CurrencyExchangeCell)?
    {
        guard  let cellFrom = contentView.exchangeFromCollectionView.cellForItem(at: IndexPath(row: from, section: 0)) as? CurrencyExchangeCell else { return nil }
        guard  let cellTo = contentView.exchangeToCollectionView.cellForItem(at: IndexPath(row: to, section: 0)) as? CurrencyExchangeCell else { return nil }
        return (cellFrom, cellTo)
    }

}

extension CurrencyExchangeViewController: CurrencyExchangeDisplayLogic {
    func displayCountExchange(viewModel: CurrencyExchange.CountExchange.ViewModel) {
        guard let (cellFrom, cellTo) = getActiveCells(from: viewModel.exchangeFromIndex, to: viewModel.exchangeToIndex) else { return }
        switch viewModel.context {
        case .From:
            cellTo.exchangeValueInput.text = viewModel.exchangeToFromValue
        case .To:
            cellFrom.exchangeValueInput.text = viewModel.exchangeFromToValue
        }
    }
    
    func displayCurrentCurrencyExchange(viewModel: CurrencyExchange.FetchCurrentCurrencyExchange.ViewModel) {
        guard let (cellFrom, cellTo) = getActiveCells(from: viewModel.exchangeFromIndex, to: viewModel.exchangeToIndex) else { return }
        cellFrom.exchangeValueInput.text = nil
        cellFrom.exchangeFromToLabel.text = viewModel.exchangeFromTo
        cellTo.exchangeValueInput.text = nil
        cellTo.exchangeFromToLabel.text = viewModel.exchangeToFrom
    }
    
    func displayFetchedCurrencies(viewModel: CurrencyExchange.FetchCurrencies.ViewModel) {
        contentView.setupData(data: viewModel.currencies)
        interactor?.fetchCurrentCurrencyExchange(request: CurrencyExchange.FetchCurrentCurrencyExchange.Request())
        interactor?.getNavigationTitle(request: CurrencyExchange.SetNavigationTitle.Request())
    }
    
    func setNavigationTitle(viewModel: CurrencyExchange.SetNavigationTitle.ViewModel)
    {
        navigationItem.title = viewModel.title
    }
}
