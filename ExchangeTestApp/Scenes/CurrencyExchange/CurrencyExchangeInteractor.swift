//
//  CurrencyExchangeInteractor.swift
//  ExchangeTestApp
//
//  Created by Vladimir on 27.01.2021.
//  Copyright (c) 2021 ___ORGANIZATIONNAME___. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

protocol CurrencyExchangeBusinessLogic
{
    func getNavigationTitle(request: CurrencyExchange.SetNavigationTitle.Request)
    func fetchCurrencies(request: CurrencyExchange.FetchCurrencies.Request)
}

protocol CurrencyExchangeDataStore
{
    var currencies: [Currency] { get set }
}

class CurrencyExchangeInteractor: CurrencyExchangeDataStore
{
    var presenter: CurrencyExchangePresentationLogic?
    var worker: CurrencyExchangeWorker? = CurrencyExchangeWorker()
    var currencies: [Currency] = []
                
}

extension CurrencyExchangeInteractor: CurrencyExchangeBusinessLogic
{
    func fetchCurrencies(request: CurrencyExchange.FetchCurrencies.Request)
    {
        let queue = DispatchQueue.global(qos: .userInitiated)
        queue.async { [weak self] in
            guard let self = self else { return }
            Thread.sleep(until: Date().addingTimeInterval(3))
            self.worker?.fetchCurrencies(completionHandler: { (currencies) in
                DispatchQueue.main.async {
                    self.currencies = currencies
                    self.presenter?.presentFetchedCurrencies(response: CurrencyExchange.FetchCurrencies.Response(currencies: self.currencies))
                }
            })
        }
    }
    
    func getNavigationTitle(request: CurrencyExchange.SetNavigationTitle.Request)
    {
        presenter?.setNavigationTitle(responce: CurrencyExchange.SetNavigationTitle.Response(title: "€1.0 = €1.0"))
    }
}
